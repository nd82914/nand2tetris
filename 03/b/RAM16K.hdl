// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
        And16(a[0..13]=address,a[14..15]=false,b[0..13]=address,b[14..15]=false,out[0..11]=ad0to11,out[12..13]=ad12to13);
     	DMux4Way(in=load,sel=ad12to13,a=loada,b=loadb,c=loadc,d=loadd);
	RAM4K(in=in,load=loada,address=ad0to11,out=outa);
	RAM4K(in=in,load=loadb,address=ad0to11,out=outb);
	RAM4K(in=in,load=loadc,address=ad0to11,out=outc);
	RAM4K(in=in,load=loadd,address=ad0to11,out=outd);
	Mux4Way16(a=outa,b=outb,c=outc,d=outd,sel=ad12to13,out=out);
}
